name: Upload Python Package

on:
  push:
  workflow_dispatch:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  black-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install black formatter
        run: |
          python -m pip install --upgrade pip
          pip install black

      - name: Run black formatter
        run: |
          python -m black --check --diff --exclude "examples" .

  pylint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install pylint
        run: |
          python -m pip install --upgrade pip
          pip install pylint

      - name: Run pylint
        run: |
            python_files=$(find . -type f -name "*.py" -not -path "./.venv/*")
            python -m pylint $python_files --disable=all --enable=unused-import,wrong-import-order,unused-variable,import-outside-toplevel,missing-function-docstring

  requirements-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependency tools
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pipdeptree

      - name: Extract all dependencies and subdependencies
        run: |
          pipdeptree --freeze > dependency_tree.txt
          awk '{print $1}' dependency_tree.txt | cut -d'=' -f1 | sort -u > all_installed_packages.txt
          echo "üìÑ all_installed_packages.txt:"
          cat all_installed_packages.txt

      - name: Generate requirements from code imports
        run: |
          pip install pipreqs urllib3==1.26.15
          pipreqs . --force --encoding=utf-8 --ignore .venv --savepath requirements_from_imports.txt

      - name: Extract package names from requirements files
        run: |
          grep -o '^[^=<>]*' all_installed_packages.txt | sed 's/-/_/g' | tr '[:upper:]' '[:lower:]' | sort -u > requirements_clean.txt
          grep -o '^[^=<>]*' requirements_from_imports.txt | sed 's/-/_/g' | tr '[:upper:]' '[:lower:]' | sort -u > imports_clean.txt
          echo "üìÑ requirements_clean.txt:"
          cat requirements_clean.txt
          echo "üìÑ imports_clean.txt:"
          cat imports_clean.txt

      - name: Check for missing top-level packages
        run: |
          comm -23 imports_clean.txt requirements_clean.txt > missing.txt
          if [ -s missing.txt ]; then
            echo "‚ùå The following packages are used in the code but missing from requirements.txt:"
            cat missing.txt
            exit 1
          else
            echo "‚úÖ All used packages are listed in requirements.txt."
          fi

  pytest:
    runs-on: ubuntu-latest
    needs:
      - black-format
      - pylint
      - requirements-check
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install pytest
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e .

      - name: Run pytest
        run: |
          python -m pytest -v tests/

  release-build:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: pytest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Build release distributions
        run: |
          python -m pip install --upgrade pip
          python -m pip install --verbose build
          python -m build --verbose

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs:
      - release-build
    permissions:
      id-token: write

    environment:
      name: pypi
      url: https://pypi.org/p/tree-readme

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/